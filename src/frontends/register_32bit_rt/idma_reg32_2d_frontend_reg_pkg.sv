// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package idma_reg32_2d_frontend_reg_pkg;

  // Param list
  parameter int NumEvents = 5;

  // Address widths within the block
  parameter int BlockAw = 8;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic [31:0] q;
  } idma_reg32_2d_frontend_reg2hw_src_addr_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } idma_reg32_2d_frontend_reg2hw_dst_addr_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } idma_reg32_2d_frontend_reg2hw_num_bytes_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } decouple;
    struct packed {
      logic        q;
    } deburst;
    struct packed {
      logic        q;
    } serialize;
    struct packed {
      logic        q;
    } twod;
  } idma_reg32_2d_frontend_reg2hw_conf_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } idma_reg32_2d_frontend_reg2hw_stride_src_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } idma_reg32_2d_frontend_reg2hw_stride_dst_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } idma_reg32_2d_frontend_reg2hw_num_repetitions_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        re;
  } idma_reg32_2d_frontend_reg2hw_next_id_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        re;
  } idma_reg32_2d_frontend_reg2hw_done_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } idma_reg32_2d_frontend_reg2hw_rt_event_counts_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } idma_reg32_2d_frontend_reg2hw_rt_src_addr_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } idma_reg32_2d_frontend_reg2hw_rt_dst_addr_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } idma_reg32_2d_frontend_reg2hw_rt_length_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } idma_reg32_2d_frontend_reg2hw_rt_src_1d_stride_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } idma_reg32_2d_frontend_reg2hw_rt_dst_1d_stride_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } idma_reg32_2d_frontend_reg2hw_rt_num_1d_reps_mreg_t;

  typedef struct packed {
    logic [15:0] d;
  } idma_reg32_2d_frontend_hw2reg_status_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } idma_reg32_2d_frontend_hw2reg_next_id_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } idma_reg32_2d_frontend_hw2reg_done_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } idma_reg32_2d_frontend_hw2reg_rt_event_counts_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } idma_reg32_2d_frontend_hw2reg_rt_src_addr_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } idma_reg32_2d_frontend_hw2reg_rt_dst_addr_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } idma_reg32_2d_frontend_hw2reg_rt_length_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } idma_reg32_2d_frontend_hw2reg_rt_src_1d_stride_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } idma_reg32_2d_frontend_hw2reg_rt_dst_1d_stride_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } idma_reg32_2d_frontend_hw2reg_rt_num_1d_reps_mreg_t;

  // Register -> HW type
  typedef struct packed {
    idma_reg32_2d_frontend_reg2hw_src_addr_reg_t src_addr; // [1381:1350]
    idma_reg32_2d_frontend_reg2hw_dst_addr_reg_t dst_addr; // [1349:1318]
    idma_reg32_2d_frontend_reg2hw_num_bytes_reg_t num_bytes; // [1317:1286]
    idma_reg32_2d_frontend_reg2hw_conf_reg_t conf; // [1285:1282]
    idma_reg32_2d_frontend_reg2hw_stride_src_reg_t stride_src; // [1281:1250]
    idma_reg32_2d_frontend_reg2hw_stride_dst_reg_t stride_dst; // [1249:1218]
    idma_reg32_2d_frontend_reg2hw_num_repetitions_reg_t num_repetitions; // [1217:1186]
    idma_reg32_2d_frontend_reg2hw_next_id_reg_t next_id; // [1185:1153]
    idma_reg32_2d_frontend_reg2hw_done_reg_t done; // [1152:1120]
    idma_reg32_2d_frontend_reg2hw_rt_event_counts_mreg_t [4:0] rt_event_counts; // [1119:960]
    idma_reg32_2d_frontend_reg2hw_rt_src_addr_mreg_t [4:0] rt_src_addr; // [959:800]
    idma_reg32_2d_frontend_reg2hw_rt_dst_addr_mreg_t [4:0] rt_dst_addr; // [799:640]
    idma_reg32_2d_frontend_reg2hw_rt_length_mreg_t [4:0] rt_length; // [639:480]
    idma_reg32_2d_frontend_reg2hw_rt_src_1d_stride_mreg_t [4:0] rt_src_1d_stride; // [479:320]
    idma_reg32_2d_frontend_reg2hw_rt_dst_1d_stride_mreg_t [4:0] rt_dst_1d_stride; // [319:160]
    idma_reg32_2d_frontend_reg2hw_rt_num_1d_reps_mreg_t [4:0] rt_num_1d_reps; // [159:0]
  } idma_reg32_2d_frontend_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    idma_reg32_2d_frontend_hw2reg_status_reg_t status; // [1234:1219]
    idma_reg32_2d_frontend_hw2reg_next_id_reg_t next_id; // [1218:1187]
    idma_reg32_2d_frontend_hw2reg_done_reg_t done; // [1186:1155]
    idma_reg32_2d_frontend_hw2reg_rt_event_counts_mreg_t [4:0] rt_event_counts; // [1154:990]
    idma_reg32_2d_frontend_hw2reg_rt_src_addr_mreg_t [4:0] rt_src_addr; // [989:825]
    idma_reg32_2d_frontend_hw2reg_rt_dst_addr_mreg_t [4:0] rt_dst_addr; // [824:660]
    idma_reg32_2d_frontend_hw2reg_rt_length_mreg_t [4:0] rt_length; // [659:495]
    idma_reg32_2d_frontend_hw2reg_rt_src_1d_stride_mreg_t [4:0] rt_src_1d_stride; // [494:330]
    idma_reg32_2d_frontend_hw2reg_rt_dst_1d_stride_mreg_t [4:0] rt_dst_1d_stride; // [329:165]
    idma_reg32_2d_frontend_hw2reg_rt_num_1d_reps_mreg_t [4:0] rt_num_1d_reps; // [164:0]
  } idma_reg32_2d_frontend_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_SRC_ADDR_OFFSET = 8'h 0;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_DST_ADDR_OFFSET = 8'h 4;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_NUM_BYTES_OFFSET = 8'h 8;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_CONF_OFFSET = 8'h c;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_STRIDE_SRC_OFFSET = 8'h 10;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_STRIDE_DST_OFFSET = 8'h 14;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_NUM_REPETITIONS_OFFSET = 8'h 18;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_STATUS_OFFSET = 8'h 1c;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_NEXT_ID_OFFSET = 8'h 20;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_DONE_OFFSET = 8'h 24;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_0_OFFSET = 8'h 28;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_1_OFFSET = 8'h 2c;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_2_OFFSET = 8'h 30;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_3_OFFSET = 8'h 34;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_4_OFFSET = 8'h 38;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_0_OFFSET = 8'h 3c;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_1_OFFSET = 8'h 40;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_2_OFFSET = 8'h 44;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_3_OFFSET = 8'h 48;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_4_OFFSET = 8'h 4c;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_0_OFFSET = 8'h 50;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_1_OFFSET = 8'h 54;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_2_OFFSET = 8'h 58;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_3_OFFSET = 8'h 5c;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_4_OFFSET = 8'h 60;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_LENGTH_0_OFFSET = 8'h 64;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_LENGTH_1_OFFSET = 8'h 68;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_LENGTH_2_OFFSET = 8'h 6c;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_LENGTH_3_OFFSET = 8'h 70;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_LENGTH_4_OFFSET = 8'h 74;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_0_OFFSET = 8'h 78;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_1_OFFSET = 8'h 7c;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_2_OFFSET = 8'h 80;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_3_OFFSET = 8'h 84;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_4_OFFSET = 8'h 88;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_0_OFFSET = 8'h 8c;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_1_OFFSET = 8'h 90;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_2_OFFSET = 8'h 94;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_3_OFFSET = 8'h 98;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_4_OFFSET = 8'h 9c;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_0_OFFSET = 8'h a0;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_1_OFFSET = 8'h a4;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_2_OFFSET = 8'h a8;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_3_OFFSET = 8'h ac;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_4_OFFSET = 8'h b0;

  // Reset values for hwext registers and their fields
  parameter logic [15:0] IDMA_REG32_2D_FRONTEND_STATUS_RESVAL = 16'h 0;
  parameter logic [31:0] IDMA_REG32_2D_FRONTEND_NEXT_ID_RESVAL = 32'h 0;
  parameter logic [31:0] IDMA_REG32_2D_FRONTEND_DONE_RESVAL = 32'h 0;

  // Register index
  typedef enum int {
    IDMA_REG32_2D_FRONTEND_SRC_ADDR,
    IDMA_REG32_2D_FRONTEND_DST_ADDR,
    IDMA_REG32_2D_FRONTEND_NUM_BYTES,
    IDMA_REG32_2D_FRONTEND_CONF,
    IDMA_REG32_2D_FRONTEND_STRIDE_SRC,
    IDMA_REG32_2D_FRONTEND_STRIDE_DST,
    IDMA_REG32_2D_FRONTEND_NUM_REPETITIONS,
    IDMA_REG32_2D_FRONTEND_STATUS,
    IDMA_REG32_2D_FRONTEND_NEXT_ID,
    IDMA_REG32_2D_FRONTEND_DONE,
    IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_0,
    IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_1,
    IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_2,
    IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_3,
    IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_4,
    IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_0,
    IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_1,
    IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_2,
    IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_3,
    IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_4,
    IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_0,
    IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_1,
    IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_2,
    IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_3,
    IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_4,
    IDMA_REG32_2D_FRONTEND_RT_LENGTH_0,
    IDMA_REG32_2D_FRONTEND_RT_LENGTH_1,
    IDMA_REG32_2D_FRONTEND_RT_LENGTH_2,
    IDMA_REG32_2D_FRONTEND_RT_LENGTH_3,
    IDMA_REG32_2D_FRONTEND_RT_LENGTH_4,
    IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_0,
    IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_1,
    IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_2,
    IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_3,
    IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_4,
    IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_0,
    IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_1,
    IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_2,
    IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_3,
    IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_4,
    IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_0,
    IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_1,
    IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_2,
    IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_3,
    IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_4
  } idma_reg32_2d_frontend_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] IDMA_REG32_2D_FRONTEND_PERMIT [45] = '{
    4'b 1111, // index[ 0] IDMA_REG32_2D_FRONTEND_SRC_ADDR
    4'b 1111, // index[ 1] IDMA_REG32_2D_FRONTEND_DST_ADDR
    4'b 1111, // index[ 2] IDMA_REG32_2D_FRONTEND_NUM_BYTES
    4'b 0001, // index[ 3] IDMA_REG32_2D_FRONTEND_CONF
    4'b 1111, // index[ 4] IDMA_REG32_2D_FRONTEND_STRIDE_SRC
    4'b 1111, // index[ 5] IDMA_REG32_2D_FRONTEND_STRIDE_DST
    4'b 1111, // index[ 6] IDMA_REG32_2D_FRONTEND_NUM_REPETITIONS
    4'b 0011, // index[ 7] IDMA_REG32_2D_FRONTEND_STATUS
    4'b 1111, // index[ 8] IDMA_REG32_2D_FRONTEND_NEXT_ID
    4'b 1111, // index[ 9] IDMA_REG32_2D_FRONTEND_DONE
    4'b 1111, // index[10] IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_0
    4'b 1111, // index[11] IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_1
    4'b 1111, // index[12] IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_2
    4'b 1111, // index[13] IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_3
    4'b 1111, // index[14] IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_4
    4'b 1111, // index[15] IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_0
    4'b 1111, // index[16] IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_1
    4'b 1111, // index[17] IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_2
    4'b 1111, // index[18] IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_3
    4'b 1111, // index[19] IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_4
    4'b 1111, // index[20] IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_0
    4'b 1111, // index[21] IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_1
    4'b 1111, // index[22] IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_2
    4'b 1111, // index[23] IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_3
    4'b 1111, // index[24] IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_4
    4'b 1111, // index[25] IDMA_REG32_2D_FRONTEND_RT_LENGTH_0
    4'b 1111, // index[26] IDMA_REG32_2D_FRONTEND_RT_LENGTH_1
    4'b 1111, // index[27] IDMA_REG32_2D_FRONTEND_RT_LENGTH_2
    4'b 1111, // index[28] IDMA_REG32_2D_FRONTEND_RT_LENGTH_3
    4'b 1111, // index[29] IDMA_REG32_2D_FRONTEND_RT_LENGTH_4
    4'b 1111, // index[30] IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_0
    4'b 1111, // index[31] IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_1
    4'b 1111, // index[32] IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_2
    4'b 1111, // index[33] IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_3
    4'b 1111, // index[34] IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_4
    4'b 1111, // index[35] IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_0
    4'b 1111, // index[36] IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_1
    4'b 1111, // index[37] IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_2
    4'b 1111, // index[38] IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_3
    4'b 1111, // index[39] IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_4
    4'b 1111, // index[40] IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_0
    4'b 1111, // index[41] IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_1
    4'b 1111, // index[42] IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_2
    4'b 1111, // index[43] IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_3
    4'b 1111  // index[44] IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_4
  };

endpackage

