// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module idma_reg32_2d_frontend_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 8
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output idma_reg32_2d_frontend_reg_pkg::idma_reg32_2d_frontend_reg2hw_t reg2hw, // Write
  input  idma_reg32_2d_frontend_reg_pkg::idma_reg32_2d_frontend_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import idma_reg32_2d_frontend_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] src_addr_qs;
  logic [31:0] src_addr_wd;
  logic src_addr_we;
  logic [31:0] dst_addr_qs;
  logic [31:0] dst_addr_wd;
  logic dst_addr_we;
  logic [31:0] num_bytes_qs;
  logic [31:0] num_bytes_wd;
  logic num_bytes_we;
  logic conf_decouple_qs;
  logic conf_decouple_wd;
  logic conf_decouple_we;
  logic conf_deburst_qs;
  logic conf_deburst_wd;
  logic conf_deburst_we;
  logic conf_serialize_qs;
  logic conf_serialize_wd;
  logic conf_serialize_we;
  logic conf_twod_qs;
  logic conf_twod_wd;
  logic conf_twod_we;
  logic [31:0] stride_src_qs;
  logic [31:0] stride_src_wd;
  logic stride_src_we;
  logic [31:0] stride_dst_qs;
  logic [31:0] stride_dst_wd;
  logic stride_dst_we;
  logic [31:0] num_repetitions_qs;
  logic [31:0] num_repetitions_wd;
  logic num_repetitions_we;
  logic [15:0] status_qs;
  logic status_re;
  logic [31:0] next_id_qs;
  logic next_id_re;
  logic [31:0] done_qs;
  logic done_re;
  logic [31:0] rt_event_counts_0_qs;
  logic [31:0] rt_event_counts_1_qs;
  logic [31:0] rt_event_counts_2_qs;
  logic [31:0] rt_event_counts_3_qs;
  logic [31:0] rt_event_counts_4_qs;
  logic [31:0] rt_src_addr_0_qs;
  logic [31:0] rt_src_addr_0_wd;
  logic rt_src_addr_0_we;
  logic [31:0] rt_src_addr_1_qs;
  logic [31:0] rt_src_addr_1_wd;
  logic rt_src_addr_1_we;
  logic [31:0] rt_src_addr_2_qs;
  logic [31:0] rt_src_addr_2_wd;
  logic rt_src_addr_2_we;
  logic [31:0] rt_src_addr_3_qs;
  logic [31:0] rt_src_addr_3_wd;
  logic rt_src_addr_3_we;
  logic [31:0] rt_src_addr_4_qs;
  logic [31:0] rt_src_addr_4_wd;
  logic rt_src_addr_4_we;
  logic [31:0] rt_dst_addr_0_qs;
  logic [31:0] rt_dst_addr_0_wd;
  logic rt_dst_addr_0_we;
  logic [31:0] rt_dst_addr_1_qs;
  logic [31:0] rt_dst_addr_1_wd;
  logic rt_dst_addr_1_we;
  logic [31:0] rt_dst_addr_2_qs;
  logic [31:0] rt_dst_addr_2_wd;
  logic rt_dst_addr_2_we;
  logic [31:0] rt_dst_addr_3_qs;
  logic [31:0] rt_dst_addr_3_wd;
  logic rt_dst_addr_3_we;
  logic [31:0] rt_dst_addr_4_qs;
  logic [31:0] rt_dst_addr_4_wd;
  logic rt_dst_addr_4_we;
  logic [31:0] rt_length_0_qs;
  logic [31:0] rt_length_0_wd;
  logic rt_length_0_we;
  logic [31:0] rt_length_1_qs;
  logic [31:0] rt_length_1_wd;
  logic rt_length_1_we;
  logic [31:0] rt_length_2_qs;
  logic [31:0] rt_length_2_wd;
  logic rt_length_2_we;
  logic [31:0] rt_length_3_qs;
  logic [31:0] rt_length_3_wd;
  logic rt_length_3_we;
  logic [31:0] rt_length_4_qs;
  logic [31:0] rt_length_4_wd;
  logic rt_length_4_we;
  logic [31:0] rt_src_1d_stride_0_qs;
  logic [31:0] rt_src_1d_stride_0_wd;
  logic rt_src_1d_stride_0_we;
  logic [31:0] rt_src_1d_stride_1_qs;
  logic [31:0] rt_src_1d_stride_1_wd;
  logic rt_src_1d_stride_1_we;
  logic [31:0] rt_src_1d_stride_2_qs;
  logic [31:0] rt_src_1d_stride_2_wd;
  logic rt_src_1d_stride_2_we;
  logic [31:0] rt_src_1d_stride_3_qs;
  logic [31:0] rt_src_1d_stride_3_wd;
  logic rt_src_1d_stride_3_we;
  logic [31:0] rt_src_1d_stride_4_qs;
  logic [31:0] rt_src_1d_stride_4_wd;
  logic rt_src_1d_stride_4_we;
  logic [31:0] rt_dst_1d_stride_0_qs;
  logic [31:0] rt_dst_1d_stride_0_wd;
  logic rt_dst_1d_stride_0_we;
  logic [31:0] rt_dst_1d_stride_1_qs;
  logic [31:0] rt_dst_1d_stride_1_wd;
  logic rt_dst_1d_stride_1_we;
  logic [31:0] rt_dst_1d_stride_2_qs;
  logic [31:0] rt_dst_1d_stride_2_wd;
  logic rt_dst_1d_stride_2_we;
  logic [31:0] rt_dst_1d_stride_3_qs;
  logic [31:0] rt_dst_1d_stride_3_wd;
  logic rt_dst_1d_stride_3_we;
  logic [31:0] rt_dst_1d_stride_4_qs;
  logic [31:0] rt_dst_1d_stride_4_wd;
  logic rt_dst_1d_stride_4_we;
  logic [31:0] rt_num_1d_reps_0_qs;
  logic [31:0] rt_num_1d_reps_0_wd;
  logic rt_num_1d_reps_0_we;
  logic [31:0] rt_num_1d_reps_1_qs;
  logic [31:0] rt_num_1d_reps_1_wd;
  logic rt_num_1d_reps_1_we;
  logic [31:0] rt_num_1d_reps_2_qs;
  logic [31:0] rt_num_1d_reps_2_wd;
  logic rt_num_1d_reps_2_we;
  logic [31:0] rt_num_1d_reps_3_qs;
  logic [31:0] rt_num_1d_reps_3_wd;
  logic rt_num_1d_reps_3_we;
  logic [31:0] rt_num_1d_reps_4_qs;
  logic [31:0] rt_num_1d_reps_4_wd;
  logic rt_num_1d_reps_4_we;

  // Register instances
  // R[src_addr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_src_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (src_addr_we),
    .wd     (src_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.src_addr.q ),

    // to register interface (read)
    .qs     (src_addr_qs)
  );


  // R[dst_addr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_dst_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (dst_addr_we),
    .wd     (dst_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dst_addr.q ),

    // to register interface (read)
    .qs     (dst_addr_qs)
  );


  // R[num_bytes]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_num_bytes (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (num_bytes_we),
    .wd     (num_bytes_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.num_bytes.q ),

    // to register interface (read)
    .qs     (num_bytes_qs)
  );


  // R[conf]: V(False)

  //   F[decouple]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_conf_decouple (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (conf_decouple_we),
    .wd     (conf_decouple_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.conf.decouple.q ),

    // to register interface (read)
    .qs     (conf_decouple_qs)
  );


  //   F[deburst]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_conf_deburst (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (conf_deburst_we),
    .wd     (conf_deburst_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.conf.deburst.q ),

    // to register interface (read)
    .qs     (conf_deburst_qs)
  );


  //   F[serialize]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_conf_serialize (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (conf_serialize_we),
    .wd     (conf_serialize_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.conf.serialize.q ),

    // to register interface (read)
    .qs     (conf_serialize_qs)
  );


  //   F[twod]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_conf_twod (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (conf_twod_we),
    .wd     (conf_twod_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.conf.twod.q ),

    // to register interface (read)
    .qs     (conf_twod_qs)
  );


  // R[stride_src]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_stride_src (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (stride_src_we),
    .wd     (stride_src_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.stride_src.q ),

    // to register interface (read)
    .qs     (stride_src_qs)
  );


  // R[stride_dst]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_stride_dst (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (stride_dst_we),
    .wd     (stride_dst_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.stride_dst.q ),

    // to register interface (read)
    .qs     (stride_dst_qs)
  );


  // R[num_repetitions]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h1)
  ) u_num_repetitions (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (num_repetitions_we),
    .wd     (num_repetitions_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.num_repetitions.q ),

    // to register interface (read)
    .qs     (num_repetitions_qs)
  );


  // R[status]: V(True)

  prim_subreg_ext #(
    .DW    (16)
  ) u_status (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_qs)
  );


  // R[next_id]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_next_id (
    .re     (next_id_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.next_id.d),
    .qre    (reg2hw.next_id.re),
    .qe     (),
    .q      (reg2hw.next_id.q ),
    .qs     (next_id_qs)
  );


  // R[done]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_done (
    .re     (done_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.done.d),
    .qre    (reg2hw.done.re),
    .qe     (),
    .q      (reg2hw.done.q ),
    .qs     (done_qs)
  );



  // Subregister 0 of Multireg rt_event_counts
  // R[rt_event_counts_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_rt_event_counts_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.rt_event_counts[0].de),
    .d      (hw2reg.rt_event_counts[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_event_counts[0].q ),

    // to register interface (read)
    .qs     (rt_event_counts_0_qs)
  );

  // Subregister 1 of Multireg rt_event_counts
  // R[rt_event_counts_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_rt_event_counts_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.rt_event_counts[1].de),
    .d      (hw2reg.rt_event_counts[1].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_event_counts[1].q ),

    // to register interface (read)
    .qs     (rt_event_counts_1_qs)
  );

  // Subregister 2 of Multireg rt_event_counts
  // R[rt_event_counts_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_rt_event_counts_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.rt_event_counts[2].de),
    .d      (hw2reg.rt_event_counts[2].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_event_counts[2].q ),

    // to register interface (read)
    .qs     (rt_event_counts_2_qs)
  );

  // Subregister 3 of Multireg rt_event_counts
  // R[rt_event_counts_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_rt_event_counts_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.rt_event_counts[3].de),
    .d      (hw2reg.rt_event_counts[3].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_event_counts[3].q ),

    // to register interface (read)
    .qs     (rt_event_counts_3_qs)
  );

  // Subregister 4 of Multireg rt_event_counts
  // R[rt_event_counts_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_rt_event_counts_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.rt_event_counts[4].de),
    .d      (hw2reg.rt_event_counts[4].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_event_counts[4].q ),

    // to register interface (read)
    .qs     (rt_event_counts_4_qs)
  );



  // Subregister 0 of Multireg rt_src_addr
  // R[rt_src_addr_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_src_addr_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_src_addr_0_we),
    .wd     (rt_src_addr_0_wd),

    // from internal hardware
    .de     (hw2reg.rt_src_addr[0].de),
    .d      (hw2reg.rt_src_addr[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_src_addr[0].q ),

    // to register interface (read)
    .qs     (rt_src_addr_0_qs)
  );

  // Subregister 1 of Multireg rt_src_addr
  // R[rt_src_addr_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_src_addr_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_src_addr_1_we),
    .wd     (rt_src_addr_1_wd),

    // from internal hardware
    .de     (hw2reg.rt_src_addr[1].de),
    .d      (hw2reg.rt_src_addr[1].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_src_addr[1].q ),

    // to register interface (read)
    .qs     (rt_src_addr_1_qs)
  );

  // Subregister 2 of Multireg rt_src_addr
  // R[rt_src_addr_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_src_addr_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_src_addr_2_we),
    .wd     (rt_src_addr_2_wd),

    // from internal hardware
    .de     (hw2reg.rt_src_addr[2].de),
    .d      (hw2reg.rt_src_addr[2].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_src_addr[2].q ),

    // to register interface (read)
    .qs     (rt_src_addr_2_qs)
  );

  // Subregister 3 of Multireg rt_src_addr
  // R[rt_src_addr_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_src_addr_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_src_addr_3_we),
    .wd     (rt_src_addr_3_wd),

    // from internal hardware
    .de     (hw2reg.rt_src_addr[3].de),
    .d      (hw2reg.rt_src_addr[3].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_src_addr[3].q ),

    // to register interface (read)
    .qs     (rt_src_addr_3_qs)
  );

  // Subregister 4 of Multireg rt_src_addr
  // R[rt_src_addr_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_src_addr_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_src_addr_4_we),
    .wd     (rt_src_addr_4_wd),

    // from internal hardware
    .de     (hw2reg.rt_src_addr[4].de),
    .d      (hw2reg.rt_src_addr[4].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_src_addr[4].q ),

    // to register interface (read)
    .qs     (rt_src_addr_4_qs)
  );



  // Subregister 0 of Multireg rt_dst_addr
  // R[rt_dst_addr_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_dst_addr_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_dst_addr_0_we),
    .wd     (rt_dst_addr_0_wd),

    // from internal hardware
    .de     (hw2reg.rt_dst_addr[0].de),
    .d      (hw2reg.rt_dst_addr[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_dst_addr[0].q ),

    // to register interface (read)
    .qs     (rt_dst_addr_0_qs)
  );

  // Subregister 1 of Multireg rt_dst_addr
  // R[rt_dst_addr_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_dst_addr_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_dst_addr_1_we),
    .wd     (rt_dst_addr_1_wd),

    // from internal hardware
    .de     (hw2reg.rt_dst_addr[1].de),
    .d      (hw2reg.rt_dst_addr[1].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_dst_addr[1].q ),

    // to register interface (read)
    .qs     (rt_dst_addr_1_qs)
  );

  // Subregister 2 of Multireg rt_dst_addr
  // R[rt_dst_addr_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_dst_addr_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_dst_addr_2_we),
    .wd     (rt_dst_addr_2_wd),

    // from internal hardware
    .de     (hw2reg.rt_dst_addr[2].de),
    .d      (hw2reg.rt_dst_addr[2].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_dst_addr[2].q ),

    // to register interface (read)
    .qs     (rt_dst_addr_2_qs)
  );

  // Subregister 3 of Multireg rt_dst_addr
  // R[rt_dst_addr_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_dst_addr_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_dst_addr_3_we),
    .wd     (rt_dst_addr_3_wd),

    // from internal hardware
    .de     (hw2reg.rt_dst_addr[3].de),
    .d      (hw2reg.rt_dst_addr[3].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_dst_addr[3].q ),

    // to register interface (read)
    .qs     (rt_dst_addr_3_qs)
  );

  // Subregister 4 of Multireg rt_dst_addr
  // R[rt_dst_addr_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_dst_addr_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_dst_addr_4_we),
    .wd     (rt_dst_addr_4_wd),

    // from internal hardware
    .de     (hw2reg.rt_dst_addr[4].de),
    .d      (hw2reg.rt_dst_addr[4].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_dst_addr[4].q ),

    // to register interface (read)
    .qs     (rt_dst_addr_4_qs)
  );



  // Subregister 0 of Multireg rt_length
  // R[rt_length_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_length_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_length_0_we),
    .wd     (rt_length_0_wd),

    // from internal hardware
    .de     (hw2reg.rt_length[0].de),
    .d      (hw2reg.rt_length[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_length[0].q ),

    // to register interface (read)
    .qs     (rt_length_0_qs)
  );

  // Subregister 1 of Multireg rt_length
  // R[rt_length_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_length_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_length_1_we),
    .wd     (rt_length_1_wd),

    // from internal hardware
    .de     (hw2reg.rt_length[1].de),
    .d      (hw2reg.rt_length[1].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_length[1].q ),

    // to register interface (read)
    .qs     (rt_length_1_qs)
  );

  // Subregister 2 of Multireg rt_length
  // R[rt_length_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_length_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_length_2_we),
    .wd     (rt_length_2_wd),

    // from internal hardware
    .de     (hw2reg.rt_length[2].de),
    .d      (hw2reg.rt_length[2].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_length[2].q ),

    // to register interface (read)
    .qs     (rt_length_2_qs)
  );

  // Subregister 3 of Multireg rt_length
  // R[rt_length_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_length_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_length_3_we),
    .wd     (rt_length_3_wd),

    // from internal hardware
    .de     (hw2reg.rt_length[3].de),
    .d      (hw2reg.rt_length[3].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_length[3].q ),

    // to register interface (read)
    .qs     (rt_length_3_qs)
  );

  // Subregister 4 of Multireg rt_length
  // R[rt_length_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_length_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_length_4_we),
    .wd     (rt_length_4_wd),

    // from internal hardware
    .de     (hw2reg.rt_length[4].de),
    .d      (hw2reg.rt_length[4].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_length[4].q ),

    // to register interface (read)
    .qs     (rt_length_4_qs)
  );



  // Subregister 0 of Multireg rt_src_1d_stride
  // R[rt_src_1d_stride_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_src_1d_stride_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_src_1d_stride_0_we),
    .wd     (rt_src_1d_stride_0_wd),

    // from internal hardware
    .de     (hw2reg.rt_src_1d_stride[0].de),
    .d      (hw2reg.rt_src_1d_stride[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_src_1d_stride[0].q ),

    // to register interface (read)
    .qs     (rt_src_1d_stride_0_qs)
  );

  // Subregister 1 of Multireg rt_src_1d_stride
  // R[rt_src_1d_stride_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_src_1d_stride_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_src_1d_stride_1_we),
    .wd     (rt_src_1d_stride_1_wd),

    // from internal hardware
    .de     (hw2reg.rt_src_1d_stride[1].de),
    .d      (hw2reg.rt_src_1d_stride[1].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_src_1d_stride[1].q ),

    // to register interface (read)
    .qs     (rt_src_1d_stride_1_qs)
  );

  // Subregister 2 of Multireg rt_src_1d_stride
  // R[rt_src_1d_stride_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_src_1d_stride_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_src_1d_stride_2_we),
    .wd     (rt_src_1d_stride_2_wd),

    // from internal hardware
    .de     (hw2reg.rt_src_1d_stride[2].de),
    .d      (hw2reg.rt_src_1d_stride[2].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_src_1d_stride[2].q ),

    // to register interface (read)
    .qs     (rt_src_1d_stride_2_qs)
  );

  // Subregister 3 of Multireg rt_src_1d_stride
  // R[rt_src_1d_stride_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_src_1d_stride_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_src_1d_stride_3_we),
    .wd     (rt_src_1d_stride_3_wd),

    // from internal hardware
    .de     (hw2reg.rt_src_1d_stride[3].de),
    .d      (hw2reg.rt_src_1d_stride[3].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_src_1d_stride[3].q ),

    // to register interface (read)
    .qs     (rt_src_1d_stride_3_qs)
  );

  // Subregister 4 of Multireg rt_src_1d_stride
  // R[rt_src_1d_stride_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_src_1d_stride_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_src_1d_stride_4_we),
    .wd     (rt_src_1d_stride_4_wd),

    // from internal hardware
    .de     (hw2reg.rt_src_1d_stride[4].de),
    .d      (hw2reg.rt_src_1d_stride[4].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_src_1d_stride[4].q ),

    // to register interface (read)
    .qs     (rt_src_1d_stride_4_qs)
  );



  // Subregister 0 of Multireg rt_dst_1d_stride
  // R[rt_dst_1d_stride_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_dst_1d_stride_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_dst_1d_stride_0_we),
    .wd     (rt_dst_1d_stride_0_wd),

    // from internal hardware
    .de     (hw2reg.rt_dst_1d_stride[0].de),
    .d      (hw2reg.rt_dst_1d_stride[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_dst_1d_stride[0].q ),

    // to register interface (read)
    .qs     (rt_dst_1d_stride_0_qs)
  );

  // Subregister 1 of Multireg rt_dst_1d_stride
  // R[rt_dst_1d_stride_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_dst_1d_stride_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_dst_1d_stride_1_we),
    .wd     (rt_dst_1d_stride_1_wd),

    // from internal hardware
    .de     (hw2reg.rt_dst_1d_stride[1].de),
    .d      (hw2reg.rt_dst_1d_stride[1].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_dst_1d_stride[1].q ),

    // to register interface (read)
    .qs     (rt_dst_1d_stride_1_qs)
  );

  // Subregister 2 of Multireg rt_dst_1d_stride
  // R[rt_dst_1d_stride_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_dst_1d_stride_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_dst_1d_stride_2_we),
    .wd     (rt_dst_1d_stride_2_wd),

    // from internal hardware
    .de     (hw2reg.rt_dst_1d_stride[2].de),
    .d      (hw2reg.rt_dst_1d_stride[2].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_dst_1d_stride[2].q ),

    // to register interface (read)
    .qs     (rt_dst_1d_stride_2_qs)
  );

  // Subregister 3 of Multireg rt_dst_1d_stride
  // R[rt_dst_1d_stride_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_dst_1d_stride_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_dst_1d_stride_3_we),
    .wd     (rt_dst_1d_stride_3_wd),

    // from internal hardware
    .de     (hw2reg.rt_dst_1d_stride[3].de),
    .d      (hw2reg.rt_dst_1d_stride[3].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_dst_1d_stride[3].q ),

    // to register interface (read)
    .qs     (rt_dst_1d_stride_3_qs)
  );

  // Subregister 4 of Multireg rt_dst_1d_stride
  // R[rt_dst_1d_stride_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_dst_1d_stride_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_dst_1d_stride_4_we),
    .wd     (rt_dst_1d_stride_4_wd),

    // from internal hardware
    .de     (hw2reg.rt_dst_1d_stride[4].de),
    .d      (hw2reg.rt_dst_1d_stride[4].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_dst_1d_stride[4].q ),

    // to register interface (read)
    .qs     (rt_dst_1d_stride_4_qs)
  );



  // Subregister 0 of Multireg rt_num_1d_reps
  // R[rt_num_1d_reps_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_num_1d_reps_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_num_1d_reps_0_we),
    .wd     (rt_num_1d_reps_0_wd),

    // from internal hardware
    .de     (hw2reg.rt_num_1d_reps[0].de),
    .d      (hw2reg.rt_num_1d_reps[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_num_1d_reps[0].q ),

    // to register interface (read)
    .qs     (rt_num_1d_reps_0_qs)
  );

  // Subregister 1 of Multireg rt_num_1d_reps
  // R[rt_num_1d_reps_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_num_1d_reps_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_num_1d_reps_1_we),
    .wd     (rt_num_1d_reps_1_wd),

    // from internal hardware
    .de     (hw2reg.rt_num_1d_reps[1].de),
    .d      (hw2reg.rt_num_1d_reps[1].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_num_1d_reps[1].q ),

    // to register interface (read)
    .qs     (rt_num_1d_reps_1_qs)
  );

  // Subregister 2 of Multireg rt_num_1d_reps
  // R[rt_num_1d_reps_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_num_1d_reps_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_num_1d_reps_2_we),
    .wd     (rt_num_1d_reps_2_wd),

    // from internal hardware
    .de     (hw2reg.rt_num_1d_reps[2].de),
    .d      (hw2reg.rt_num_1d_reps[2].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_num_1d_reps[2].q ),

    // to register interface (read)
    .qs     (rt_num_1d_reps_2_qs)
  );

  // Subregister 3 of Multireg rt_num_1d_reps
  // R[rt_num_1d_reps_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_num_1d_reps_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_num_1d_reps_3_we),
    .wd     (rt_num_1d_reps_3_wd),

    // from internal hardware
    .de     (hw2reg.rt_num_1d_reps[3].de),
    .d      (hw2reg.rt_num_1d_reps[3].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_num_1d_reps[3].q ),

    // to register interface (read)
    .qs     (rt_num_1d_reps_3_qs)
  );

  // Subregister 4 of Multireg rt_num_1d_reps
  // R[rt_num_1d_reps_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_rt_num_1d_reps_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_num_1d_reps_4_we),
    .wd     (rt_num_1d_reps_4_wd),

    // from internal hardware
    .de     (hw2reg.rt_num_1d_reps[4].de),
    .d      (hw2reg.rt_num_1d_reps[4].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_num_1d_reps[4].q ),

    // to register interface (read)
    .qs     (rt_num_1d_reps_4_qs)
  );




  logic [44:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == IDMA_REG32_2D_FRONTEND_SRC_ADDR_OFFSET);
    addr_hit[ 1] = (reg_addr == IDMA_REG32_2D_FRONTEND_DST_ADDR_OFFSET);
    addr_hit[ 2] = (reg_addr == IDMA_REG32_2D_FRONTEND_NUM_BYTES_OFFSET);
    addr_hit[ 3] = (reg_addr == IDMA_REG32_2D_FRONTEND_CONF_OFFSET);
    addr_hit[ 4] = (reg_addr == IDMA_REG32_2D_FRONTEND_STRIDE_SRC_OFFSET);
    addr_hit[ 5] = (reg_addr == IDMA_REG32_2D_FRONTEND_STRIDE_DST_OFFSET);
    addr_hit[ 6] = (reg_addr == IDMA_REG32_2D_FRONTEND_NUM_REPETITIONS_OFFSET);
    addr_hit[ 7] = (reg_addr == IDMA_REG32_2D_FRONTEND_STATUS_OFFSET);
    addr_hit[ 8] = (reg_addr == IDMA_REG32_2D_FRONTEND_NEXT_ID_OFFSET);
    addr_hit[ 9] = (reg_addr == IDMA_REG32_2D_FRONTEND_DONE_OFFSET);
    addr_hit[10] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_0_OFFSET);
    addr_hit[11] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_1_OFFSET);
    addr_hit[12] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_2_OFFSET);
    addr_hit[13] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_3_OFFSET);
    addr_hit[14] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_EVENT_COUNTS_4_OFFSET);
    addr_hit[15] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_0_OFFSET);
    addr_hit[16] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_1_OFFSET);
    addr_hit[17] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_2_OFFSET);
    addr_hit[18] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_3_OFFSET);
    addr_hit[19] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_SRC_ADDR_4_OFFSET);
    addr_hit[20] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_0_OFFSET);
    addr_hit[21] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_1_OFFSET);
    addr_hit[22] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_2_OFFSET);
    addr_hit[23] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_3_OFFSET);
    addr_hit[24] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_DST_ADDR_4_OFFSET);
    addr_hit[25] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_LENGTH_0_OFFSET);
    addr_hit[26] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_LENGTH_1_OFFSET);
    addr_hit[27] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_LENGTH_2_OFFSET);
    addr_hit[28] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_LENGTH_3_OFFSET);
    addr_hit[29] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_LENGTH_4_OFFSET);
    addr_hit[30] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_0_OFFSET);
    addr_hit[31] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_1_OFFSET);
    addr_hit[32] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_2_OFFSET);
    addr_hit[33] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_3_OFFSET);
    addr_hit[34] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_SRC_1D_STRIDE_4_OFFSET);
    addr_hit[35] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_0_OFFSET);
    addr_hit[36] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_1_OFFSET);
    addr_hit[37] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_2_OFFSET);
    addr_hit[38] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_3_OFFSET);
    addr_hit[39] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_DST_1D_STRIDE_4_OFFSET);
    addr_hit[40] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_0_OFFSET);
    addr_hit[41] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_1_OFFSET);
    addr_hit[42] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_2_OFFSET);
    addr_hit[43] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_3_OFFSET);
    addr_hit[44] = (reg_addr == IDMA_REG32_2D_FRONTEND_RT_NUM_1D_REPS_4_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[41] & ~reg_be))) |
               (addr_hit[42] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[42] & ~reg_be))) |
               (addr_hit[43] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[43] & ~reg_be))) |
               (addr_hit[44] & (|(IDMA_REG32_2D_FRONTEND_PERMIT[44] & ~reg_be)))));
  end

  assign src_addr_we = addr_hit[0] & reg_we & !reg_error;
  assign src_addr_wd = reg_wdata[31:0];

  assign dst_addr_we = addr_hit[1] & reg_we & !reg_error;
  assign dst_addr_wd = reg_wdata[31:0];

  assign num_bytes_we = addr_hit[2] & reg_we & !reg_error;
  assign num_bytes_wd = reg_wdata[31:0];

  assign conf_decouple_we = addr_hit[3] & reg_we & !reg_error;
  assign conf_decouple_wd = reg_wdata[0];

  assign conf_deburst_we = addr_hit[3] & reg_we & !reg_error;
  assign conf_deburst_wd = reg_wdata[1];

  assign conf_serialize_we = addr_hit[3] & reg_we & !reg_error;
  assign conf_serialize_wd = reg_wdata[2];

  assign conf_twod_we = addr_hit[3] & reg_we & !reg_error;
  assign conf_twod_wd = reg_wdata[3];

  assign stride_src_we = addr_hit[4] & reg_we & !reg_error;
  assign stride_src_wd = reg_wdata[31:0];

  assign stride_dst_we = addr_hit[5] & reg_we & !reg_error;
  assign stride_dst_wd = reg_wdata[31:0];

  assign num_repetitions_we = addr_hit[6] & reg_we & !reg_error;
  assign num_repetitions_wd = reg_wdata[31:0];

  assign status_re = addr_hit[7] & reg_re & !reg_error;

  assign next_id_re = addr_hit[8] & reg_re & !reg_error;

  assign done_re = addr_hit[9] & reg_re & !reg_error;

  assign rt_src_addr_0_we = addr_hit[15] & reg_we & !reg_error;
  assign rt_src_addr_0_wd = reg_wdata[31:0];

  assign rt_src_addr_1_we = addr_hit[16] & reg_we & !reg_error;
  assign rt_src_addr_1_wd = reg_wdata[31:0];

  assign rt_src_addr_2_we = addr_hit[17] & reg_we & !reg_error;
  assign rt_src_addr_2_wd = reg_wdata[31:0];

  assign rt_src_addr_3_we = addr_hit[18] & reg_we & !reg_error;
  assign rt_src_addr_3_wd = reg_wdata[31:0];

  assign rt_src_addr_4_we = addr_hit[19] & reg_we & !reg_error;
  assign rt_src_addr_4_wd = reg_wdata[31:0];

  assign rt_dst_addr_0_we = addr_hit[20] & reg_we & !reg_error;
  assign rt_dst_addr_0_wd = reg_wdata[31:0];

  assign rt_dst_addr_1_we = addr_hit[21] & reg_we & !reg_error;
  assign rt_dst_addr_1_wd = reg_wdata[31:0];

  assign rt_dst_addr_2_we = addr_hit[22] & reg_we & !reg_error;
  assign rt_dst_addr_2_wd = reg_wdata[31:0];

  assign rt_dst_addr_3_we = addr_hit[23] & reg_we & !reg_error;
  assign rt_dst_addr_3_wd = reg_wdata[31:0];

  assign rt_dst_addr_4_we = addr_hit[24] & reg_we & !reg_error;
  assign rt_dst_addr_4_wd = reg_wdata[31:0];

  assign rt_length_0_we = addr_hit[25] & reg_we & !reg_error;
  assign rt_length_0_wd = reg_wdata[31:0];

  assign rt_length_1_we = addr_hit[26] & reg_we & !reg_error;
  assign rt_length_1_wd = reg_wdata[31:0];

  assign rt_length_2_we = addr_hit[27] & reg_we & !reg_error;
  assign rt_length_2_wd = reg_wdata[31:0];

  assign rt_length_3_we = addr_hit[28] & reg_we & !reg_error;
  assign rt_length_3_wd = reg_wdata[31:0];

  assign rt_length_4_we = addr_hit[29] & reg_we & !reg_error;
  assign rt_length_4_wd = reg_wdata[31:0];

  assign rt_src_1d_stride_0_we = addr_hit[30] & reg_we & !reg_error;
  assign rt_src_1d_stride_0_wd = reg_wdata[31:0];

  assign rt_src_1d_stride_1_we = addr_hit[31] & reg_we & !reg_error;
  assign rt_src_1d_stride_1_wd = reg_wdata[31:0];

  assign rt_src_1d_stride_2_we = addr_hit[32] & reg_we & !reg_error;
  assign rt_src_1d_stride_2_wd = reg_wdata[31:0];

  assign rt_src_1d_stride_3_we = addr_hit[33] & reg_we & !reg_error;
  assign rt_src_1d_stride_3_wd = reg_wdata[31:0];

  assign rt_src_1d_stride_4_we = addr_hit[34] & reg_we & !reg_error;
  assign rt_src_1d_stride_4_wd = reg_wdata[31:0];

  assign rt_dst_1d_stride_0_we = addr_hit[35] & reg_we & !reg_error;
  assign rt_dst_1d_stride_0_wd = reg_wdata[31:0];

  assign rt_dst_1d_stride_1_we = addr_hit[36] & reg_we & !reg_error;
  assign rt_dst_1d_stride_1_wd = reg_wdata[31:0];

  assign rt_dst_1d_stride_2_we = addr_hit[37] & reg_we & !reg_error;
  assign rt_dst_1d_stride_2_wd = reg_wdata[31:0];

  assign rt_dst_1d_stride_3_we = addr_hit[38] & reg_we & !reg_error;
  assign rt_dst_1d_stride_3_wd = reg_wdata[31:0];

  assign rt_dst_1d_stride_4_we = addr_hit[39] & reg_we & !reg_error;
  assign rt_dst_1d_stride_4_wd = reg_wdata[31:0];

  assign rt_num_1d_reps_0_we = addr_hit[40] & reg_we & !reg_error;
  assign rt_num_1d_reps_0_wd = reg_wdata[31:0];

  assign rt_num_1d_reps_1_we = addr_hit[41] & reg_we & !reg_error;
  assign rt_num_1d_reps_1_wd = reg_wdata[31:0];

  assign rt_num_1d_reps_2_we = addr_hit[42] & reg_we & !reg_error;
  assign rt_num_1d_reps_2_wd = reg_wdata[31:0];

  assign rt_num_1d_reps_3_we = addr_hit[43] & reg_we & !reg_error;
  assign rt_num_1d_reps_3_wd = reg_wdata[31:0];

  assign rt_num_1d_reps_4_we = addr_hit[44] & reg_we & !reg_error;
  assign rt_num_1d_reps_4_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = src_addr_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = dst_addr_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = num_bytes_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = conf_decouple_qs;
        reg_rdata_next[1] = conf_deburst_qs;
        reg_rdata_next[2] = conf_serialize_qs;
        reg_rdata_next[3] = conf_twod_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = stride_src_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = stride_dst_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = num_repetitions_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[15:0] = status_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = next_id_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = done_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = rt_event_counts_0_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = rt_event_counts_1_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = rt_event_counts_2_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = rt_event_counts_3_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = rt_event_counts_4_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = rt_src_addr_0_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = rt_src_addr_1_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = rt_src_addr_2_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = rt_src_addr_3_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = rt_src_addr_4_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = rt_dst_addr_0_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[31:0] = rt_dst_addr_1_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[31:0] = rt_dst_addr_2_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[31:0] = rt_dst_addr_3_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[31:0] = rt_dst_addr_4_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[31:0] = rt_length_0_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[31:0] = rt_length_1_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[31:0] = rt_length_2_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[31:0] = rt_length_3_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[31:0] = rt_length_4_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[31:0] = rt_src_1d_stride_0_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[31:0] = rt_src_1d_stride_1_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[31:0] = rt_src_1d_stride_2_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[31:0] = rt_src_1d_stride_3_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[31:0] = rt_src_1d_stride_4_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[31:0] = rt_dst_1d_stride_0_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[31:0] = rt_dst_1d_stride_1_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[31:0] = rt_dst_1d_stride_2_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[31:0] = rt_dst_1d_stride_3_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[31:0] = rt_dst_1d_stride_4_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[31:0] = rt_num_1d_reps_0_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[31:0] = rt_num_1d_reps_1_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[31:0] = rt_num_1d_reps_2_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[31:0] = rt_num_1d_reps_3_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[31:0] = rt_num_1d_reps_4_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
