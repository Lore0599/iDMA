// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module idma_reg64_2d_reg_top (
        input wire clk,
        input wire arst_n,

        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [2:0] s_apb_pprot,
        input wire [8:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,

        input idma_reg64_2d_reg_pkg::idma_reg__in_t hwif_in,
        output idma_reg64_2d_reg_pkg::idma_reg__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [8:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // Request
    logic is_active;
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= {s_apb_paddr[8:2], 2'b0};
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<4; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;
    logic external_req;
    logic external_pending;
    logic external_wr_ack;
    logic external_rd_ack;
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            external_pending <= '0;
        end else begin
            if(external_req & ~external_wr_ack & ~external_rd_ack) external_pending <= '1;
            else if(external_wr_ack | external_rd_ack) external_pending <= '0;
            `ifndef SYNTHESIS
                assert(!external_wr_ack || (external_pending | external_req))
                    else $error("An external wr_ack strobe was asserted when no external request was active");
                assert(!external_rd_ack || (external_pending | external_req))
                    else $error("An external rd_ack strobe was asserted when no external request was active");
            `endif
        end
    end

    // Read & write latencies are balanced. Stalls not required
    // except if external
    assign cpuif_req_stall_rd = external_pending;
    assign cpuif_req_stall_wr = external_pending;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic conf;
        logic status[16];
        logic next_id[16];
        logic done_id[16];
        logic dst_addr[2];
        logic src_addr[2];
        logic length[2];
        struct {
            logic dst_stride[2];
            logic src_stride[2];
            logic reps[2];
        } dim[1];
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_strb_is_external;

    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        automatic logic is_external;
        is_external = '0;
        decoded_reg_strb.conf = cpuif_req_masked & (cpuif_addr == 9'h0);
        for(int i0=0; i0<16; i0++) begin
            decoded_reg_strb.status[i0] = cpuif_req_masked & (cpuif_addr == 9'h4 + (9)'(i0) * 9'h4);
            is_external |= cpuif_req_masked & (cpuif_addr == 9'h4 + (9)'(i0) * 9'h4) & !cpuif_req_is_wr;
        end
        for(int i0=0; i0<16; i0++) begin
            decoded_reg_strb.next_id[i0] = cpuif_req_masked & (cpuif_addr == 9'h44 + (9)'(i0) * 9'h4);
            is_external |= cpuif_req_masked & (cpuif_addr == 9'h44 + (9)'(i0) * 9'h4) & !cpuif_req_is_wr;
        end
        for(int i0=0; i0<16; i0++) begin
            decoded_reg_strb.done_id[i0] = cpuif_req_masked & (cpuif_addr == 9'h84 + (9)'(i0) * 9'h4);
            is_external |= cpuif_req_masked & (cpuif_addr == 9'h84 + (9)'(i0) * 9'h4) & !cpuif_req_is_wr;
        end
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.dst_addr[i0] = cpuif_req_masked & (cpuif_addr == 9'hd0 + (9)'(i0) * 9'h4);
        end
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.src_addr[i0] = cpuif_req_masked & (cpuif_addr == 9'hd8 + (9)'(i0) * 9'h4);
        end
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.length[i0] = cpuif_req_masked & (cpuif_addr == 9'he0 + (9)'(i0) * 9'h4);
        end
        for(int i0=0; i0<1; i0++) begin
            for(int i1=0; i1<2; i1++) begin
                decoded_reg_strb.dim[i0].dst_stride[i1] = cpuif_req_masked & (cpuif_addr == 9'h100 + (9)'(i0) * 9'h18 + (9)'(i1) * 9'h4);
            end
            for(int i1=0; i1<2; i1++) begin
                decoded_reg_strb.dim[i0].src_stride[i1] = cpuif_req_masked & (cpuif_addr == 9'h108 + (9)'(i0) * 9'h18 + (9)'(i1) * 9'h4);
            end
            for(int i1=0; i1<2; i1++) begin
                decoded_reg_strb.dim[i0].reps[i1] = cpuif_req_masked & (cpuif_addr == 9'h110 + (9)'(i0) * 9'h18 + (9)'(i1) * 9'h4);
            end
        end
        decoded_strb_is_external = is_external;
        external_req = is_external;
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic next;
                logic load_next;
            } decouple_aw;
            struct {
                logic next;
                logic load_next;
            } decouple_rw;
            struct {
                logic next;
                logic load_next;
            } src_reduce_len;
            struct {
                logic next;
                logic load_next;
            } dst_reduce_len;
            struct {
                logic [2:0] next;
                logic load_next;
            } src_max_llen;
            struct {
                logic [2:0] next;
                logic load_next;
            } dst_max_llen;
            struct {
                logic [1:0] next;
                logic load_next;
            } enable_nd;
            struct {
                logic [2:0] next;
                logic load_next;
            } src_protocol;
            struct {
                logic [2:0] next;
                logic load_next;
            } dst_protocol;
        } conf;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } dst_addr;
        } dst_addr[2];
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } src_addr;
        } src_addr[2];
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } length;
        } length[2];
        struct {
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                } dst_stride;
            } dst_stride[2];
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                } src_stride;
            } src_stride[2];
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                } reps;
            } reps[2];
        } dim[1];
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic value;
            } decouple_aw;
            struct {
                logic value;
            } decouple_rw;
            struct {
                logic value;
            } src_reduce_len;
            struct {
                logic value;
            } dst_reduce_len;
            struct {
                logic [2:0] value;
            } src_max_llen;
            struct {
                logic [2:0] value;
            } dst_max_llen;
            struct {
                logic [1:0] value;
            } enable_nd;
            struct {
                logic [2:0] value;
            } src_protocol;
            struct {
                logic [2:0] value;
            } dst_protocol;
        } conf;
        struct {
            struct {
                logic [31:0] value;
            } dst_addr;
        } dst_addr[2];
        struct {
            struct {
                logic [31:0] value;
            } src_addr;
        } src_addr[2];
        struct {
            struct {
                logic [31:0] value;
            } length;
        } length[2];
        struct {
            struct {
                struct {
                    logic [31:0] value;
                } dst_stride;
            } dst_stride[2];
            struct {
                struct {
                    logic [31:0] value;
                } src_stride;
            } src_stride[2];
            struct {
                struct {
                    logic [31:0] value;
                } reps;
            } reps[2];
        } dim[1];
    } field_storage_t;
    field_storage_t field_storage;

    // Field: idma_reg.conf.decouple_aw
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.conf.decouple_aw.value;
        load_next_c = '0;
        if(decoded_reg_strb.conf && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.conf.decouple_aw.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.conf.decouple_aw.next = next_c;
        field_combo.conf.decouple_aw.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.conf.decouple_aw.value <= 1'h0;
        end else begin
            if(field_combo.conf.decouple_aw.load_next) begin
                field_storage.conf.decouple_aw.value <= field_combo.conf.decouple_aw.next;
            end
        end
    end
    assign hwif_out.conf.decouple_aw.value = field_storage.conf.decouple_aw.value;
    // Field: idma_reg.conf.decouple_rw
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.conf.decouple_rw.value;
        load_next_c = '0;
        if(decoded_reg_strb.conf && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.conf.decouple_rw.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.conf.decouple_rw.next = next_c;
        field_combo.conf.decouple_rw.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.conf.decouple_rw.value <= 1'h0;
        end else begin
            if(field_combo.conf.decouple_rw.load_next) begin
                field_storage.conf.decouple_rw.value <= field_combo.conf.decouple_rw.next;
            end
        end
    end
    assign hwif_out.conf.decouple_rw.value = field_storage.conf.decouple_rw.value;
    // Field: idma_reg.conf.src_reduce_len
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.conf.src_reduce_len.value;
        load_next_c = '0;
        if(decoded_reg_strb.conf && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.conf.src_reduce_len.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.conf.src_reduce_len.next = next_c;
        field_combo.conf.src_reduce_len.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.conf.src_reduce_len.value <= 1'h0;
        end else begin
            if(field_combo.conf.src_reduce_len.load_next) begin
                field_storage.conf.src_reduce_len.value <= field_combo.conf.src_reduce_len.next;
            end
        end
    end
    assign hwif_out.conf.src_reduce_len.value = field_storage.conf.src_reduce_len.value;
    // Field: idma_reg.conf.dst_reduce_len
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.conf.dst_reduce_len.value;
        load_next_c = '0;
        if(decoded_reg_strb.conf && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.conf.dst_reduce_len.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.conf.dst_reduce_len.next = next_c;
        field_combo.conf.dst_reduce_len.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.conf.dst_reduce_len.value <= 1'h0;
        end else begin
            if(field_combo.conf.dst_reduce_len.load_next) begin
                field_storage.conf.dst_reduce_len.value <= field_combo.conf.dst_reduce_len.next;
            end
        end
    end
    assign hwif_out.conf.dst_reduce_len.value = field_storage.conf.dst_reduce_len.value;
    // Field: idma_reg.conf.src_max_llen
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.conf.src_max_llen.value;
        load_next_c = '0;
        if(decoded_reg_strb.conf && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.conf.src_max_llen.value & ~decoded_wr_biten[6:4]) | (decoded_wr_data[6:4] & decoded_wr_biten[6:4]);
            load_next_c = '1;
        end
        field_combo.conf.src_max_llen.next = next_c;
        field_combo.conf.src_max_llen.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.conf.src_max_llen.value <= 3'h0;
        end else begin
            if(field_combo.conf.src_max_llen.load_next) begin
                field_storage.conf.src_max_llen.value <= field_combo.conf.src_max_llen.next;
            end
        end
    end
    assign hwif_out.conf.src_max_llen.value = field_storage.conf.src_max_llen.value;
    // Field: idma_reg.conf.dst_max_llen
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.conf.dst_max_llen.value;
        load_next_c = '0;
        if(decoded_reg_strb.conf && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.conf.dst_max_llen.value & ~decoded_wr_biten[9:7]) | (decoded_wr_data[9:7] & decoded_wr_biten[9:7]);
            load_next_c = '1;
        end
        field_combo.conf.dst_max_llen.next = next_c;
        field_combo.conf.dst_max_llen.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.conf.dst_max_llen.value <= 3'h0;
        end else begin
            if(field_combo.conf.dst_max_llen.load_next) begin
                field_storage.conf.dst_max_llen.value <= field_combo.conf.dst_max_llen.next;
            end
        end
    end
    assign hwif_out.conf.dst_max_llen.value = field_storage.conf.dst_max_llen.value;
    // Field: idma_reg.conf.enable_nd
    always_comb begin
        automatic logic [1:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.conf.enable_nd.value;
        load_next_c = '0;
        if(decoded_reg_strb.conf && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.conf.enable_nd.value & ~decoded_wr_biten[11:10]) | (decoded_wr_data[11:10] & decoded_wr_biten[11:10]);
            load_next_c = '1;
        end
        field_combo.conf.enable_nd.next = next_c;
        field_combo.conf.enable_nd.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.conf.enable_nd.value <= 2'h0;
        end else begin
            if(field_combo.conf.enable_nd.load_next) begin
                field_storage.conf.enable_nd.value <= field_combo.conf.enable_nd.next;
            end
        end
    end
    assign hwif_out.conf.enable_nd.value = field_storage.conf.enable_nd.value;
    // Field: idma_reg.conf.src_protocol
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.conf.src_protocol.value;
        load_next_c = '0;
        if(decoded_reg_strb.conf && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.conf.src_protocol.value & ~decoded_wr_biten[14:12]) | (decoded_wr_data[14:12] & decoded_wr_biten[14:12]);
            load_next_c = '1;
        end
        field_combo.conf.src_protocol.next = next_c;
        field_combo.conf.src_protocol.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.conf.src_protocol.value <= 3'h0;
        end else begin
            if(field_combo.conf.src_protocol.load_next) begin
                field_storage.conf.src_protocol.value <= field_combo.conf.src_protocol.next;
            end
        end
    end
    assign hwif_out.conf.src_protocol.value = field_storage.conf.src_protocol.value;
    // Field: idma_reg.conf.dst_protocol
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.conf.dst_protocol.value;
        load_next_c = '0;
        if(decoded_reg_strb.conf && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.conf.dst_protocol.value & ~decoded_wr_biten[17:15]) | (decoded_wr_data[17:15] & decoded_wr_biten[17:15]);
            load_next_c = '1;
        end
        field_combo.conf.dst_protocol.next = next_c;
        field_combo.conf.dst_protocol.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.conf.dst_protocol.value <= 3'h0;
        end else begin
            if(field_combo.conf.dst_protocol.load_next) begin
                field_storage.conf.dst_protocol.value <= field_combo.conf.dst_protocol.next;
            end
        end
    end
    assign hwif_out.conf.dst_protocol.value = field_storage.conf.dst_protocol.value;
    for(genvar i0=0; i0<16; i0++) begin

        assign hwif_out.status[i0].req = !decoded_req_is_wr ? decoded_reg_strb.status[i0] : '0;
        assign hwif_out.status[i0].req_is_wr = decoded_req_is_wr;
    end
    for(genvar i0=0; i0<16; i0++) begin

        assign hwif_out.next_id[i0].req = !decoded_req_is_wr ? decoded_reg_strb.next_id[i0] : '0;
        assign hwif_out.next_id[i0].req_is_wr = decoded_req_is_wr;
    end
    for(genvar i0=0; i0<16; i0++) begin

        assign hwif_out.done_id[i0].req = !decoded_req_is_wr ? decoded_reg_strb.done_id[i0] : '0;
        assign hwif_out.done_id[i0].req_is_wr = decoded_req_is_wr;
    end
    for(genvar i0=0; i0<2; i0++) begin
        // Field: idma_reg.dst_addr[].dst_addr
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.dst_addr[i0].dst_addr.value;
            load_next_c = '0;
            if(decoded_reg_strb.dst_addr[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.dst_addr[i0].dst_addr.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.dst_addr[i0].dst_addr.next = next_c;
            field_combo.dst_addr[i0].dst_addr.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge arst_n) begin
            if(~arst_n) begin
                field_storage.dst_addr[i0].dst_addr.value <= 32'h0;
            end else begin
                if(field_combo.dst_addr[i0].dst_addr.load_next) begin
                    field_storage.dst_addr[i0].dst_addr.value <= field_combo.dst_addr[i0].dst_addr.next;
                end
            end
        end
        assign hwif_out.dst_addr[i0].dst_addr.value = field_storage.dst_addr[i0].dst_addr.value;
    end
    for(genvar i0=0; i0<2; i0++) begin
        // Field: idma_reg.src_addr[].src_addr
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.src_addr[i0].src_addr.value;
            load_next_c = '0;
            if(decoded_reg_strb.src_addr[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.src_addr[i0].src_addr.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.src_addr[i0].src_addr.next = next_c;
            field_combo.src_addr[i0].src_addr.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge arst_n) begin
            if(~arst_n) begin
                field_storage.src_addr[i0].src_addr.value <= 32'h0;
            end else begin
                if(field_combo.src_addr[i0].src_addr.load_next) begin
                    field_storage.src_addr[i0].src_addr.value <= field_combo.src_addr[i0].src_addr.next;
                end
            end
        end
        assign hwif_out.src_addr[i0].src_addr.value = field_storage.src_addr[i0].src_addr.value;
    end
    for(genvar i0=0; i0<2; i0++) begin
        // Field: idma_reg.length[].length
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.length[i0].length.value;
            load_next_c = '0;
            if(decoded_reg_strb.length[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.length[i0].length.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.length[i0].length.next = next_c;
            field_combo.length[i0].length.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge arst_n) begin
            if(~arst_n) begin
                field_storage.length[i0].length.value <= 32'h0;
            end else begin
                if(field_combo.length[i0].length.load_next) begin
                    field_storage.length[i0].length.value <= field_combo.length[i0].length.next;
                end
            end
        end
        assign hwif_out.length[i0].length.value = field_storage.length[i0].length.value;
    end
    for(genvar i0=0; i0<1; i0++) begin
        for(genvar i1=0; i1<2; i1++) begin
            // Field: idma_reg.dim[].dst_stride[].dst_stride
            always_comb begin
                automatic logic [31:0] next_c;
                automatic logic load_next_c;
                next_c = field_storage.dim[i0].dst_stride[i1].dst_stride.value;
                load_next_c = '0;
                if(decoded_reg_strb.dim[i0].dst_stride[i1] && decoded_req_is_wr) begin // SW write
                    next_c = (field_storage.dim[i0].dst_stride[i1].dst_stride.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                    load_next_c = '1;
                end
                field_combo.dim[i0].dst_stride[i1].dst_stride.next = next_c;
                field_combo.dim[i0].dst_stride[i1].dst_stride.load_next = load_next_c;
            end
            always_ff @(posedge clk or negedge arst_n) begin
                if(~arst_n) begin
                    field_storage.dim[i0].dst_stride[i1].dst_stride.value <= 32'h0;
                end else begin
                    if(field_combo.dim[i0].dst_stride[i1].dst_stride.load_next) begin
                        field_storage.dim[i0].dst_stride[i1].dst_stride.value <= field_combo.dim[i0].dst_stride[i1].dst_stride.next;
                    end
                end
            end
            assign hwif_out.dim[i0].dst_stride[i1].dst_stride.value = field_storage.dim[i0].dst_stride[i1].dst_stride.value;
        end
        for(genvar i1=0; i1<2; i1++) begin
            // Field: idma_reg.dim[].src_stride[].src_stride
            always_comb begin
                automatic logic [31:0] next_c;
                automatic logic load_next_c;
                next_c = field_storage.dim[i0].src_stride[i1].src_stride.value;
                load_next_c = '0;
                if(decoded_reg_strb.dim[i0].src_stride[i1] && decoded_req_is_wr) begin // SW write
                    next_c = (field_storage.dim[i0].src_stride[i1].src_stride.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                    load_next_c = '1;
                end
                field_combo.dim[i0].src_stride[i1].src_stride.next = next_c;
                field_combo.dim[i0].src_stride[i1].src_stride.load_next = load_next_c;
            end
            always_ff @(posedge clk or negedge arst_n) begin
                if(~arst_n) begin
                    field_storage.dim[i0].src_stride[i1].src_stride.value <= 32'h0;
                end else begin
                    if(field_combo.dim[i0].src_stride[i1].src_stride.load_next) begin
                        field_storage.dim[i0].src_stride[i1].src_stride.value <= field_combo.dim[i0].src_stride[i1].src_stride.next;
                    end
                end
            end
            assign hwif_out.dim[i0].src_stride[i1].src_stride.value = field_storage.dim[i0].src_stride[i1].src_stride.value;
        end
        for(genvar i1=0; i1<2; i1++) begin
            // Field: idma_reg.dim[].reps[].reps
            always_comb begin
                automatic logic [31:0] next_c;
                automatic logic load_next_c;
                next_c = field_storage.dim[i0].reps[i1].reps.value;
                load_next_c = '0;
                if(decoded_reg_strb.dim[i0].reps[i1] && decoded_req_is_wr) begin // SW write
                    next_c = (field_storage.dim[i0].reps[i1].reps.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                    load_next_c = '1;
                end
                field_combo.dim[i0].reps[i1].reps.next = next_c;
                field_combo.dim[i0].reps[i1].reps.load_next = load_next_c;
            end
            always_ff @(posedge clk or negedge arst_n) begin
                if(~arst_n) begin
                    field_storage.dim[i0].reps[i1].reps.value <= 32'h0;
                end else begin
                    if(field_combo.dim[i0].reps[i1].reps.load_next) begin
                        field_storage.dim[i0].reps[i1].reps.value <= field_combo.dim[i0].reps[i1].reps.next;
                    end
                end
            end
            assign hwif_out.dim[i0].reps[i1].reps.value = field_storage.dim[i0].reps[i1].reps.value;
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    always_comb begin
        automatic logic wr_ack;
        wr_ack = '0;
        
        external_wr_ack = wr_ack;
    end
    assign cpuif_wr_ack = external_wr_ack | (decoded_req & decoded_req_is_wr & ~decoded_strb_is_external);
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_external_rd_ack_c;
    always_comb begin
        automatic logic rd_ack;
        rd_ack = '0;
        for(int i0=0; i0<16; i0++) begin
            rd_ack |= hwif_in.status[i0].rd_ack;
        end
        for(int i0=0; i0<16; i0++) begin
            rd_ack |= hwif_in.next_id[i0].rd_ack;
        end
        for(int i0=0; i0<16; i0++) begin
            rd_ack |= hwif_in.done_id[i0].rd_ack;
        end
        readback_external_rd_ack_c = rd_ack;
    end

    logic readback_external_rd_ack;

    assign readback_external_rd_ack = readback_external_rd_ack_c;

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[61];
    assign readback_array[0][0:0] = (decoded_reg_strb.conf && !decoded_req_is_wr) ? field_storage.conf.decouple_aw.value : '0;
    assign readback_array[0][1:1] = (decoded_reg_strb.conf && !decoded_req_is_wr) ? field_storage.conf.decouple_rw.value : '0;
    assign readback_array[0][2:2] = (decoded_reg_strb.conf && !decoded_req_is_wr) ? field_storage.conf.src_reduce_len.value : '0;
    assign readback_array[0][3:3] = (decoded_reg_strb.conf && !decoded_req_is_wr) ? field_storage.conf.dst_reduce_len.value : '0;
    assign readback_array[0][6:4] = (decoded_reg_strb.conf && !decoded_req_is_wr) ? field_storage.conf.src_max_llen.value : '0;
    assign readback_array[0][9:7] = (decoded_reg_strb.conf && !decoded_req_is_wr) ? field_storage.conf.dst_max_llen.value : '0;
    assign readback_array[0][11:10] = (decoded_reg_strb.conf && !decoded_req_is_wr) ? field_storage.conf.enable_nd.value : '0;
    assign readback_array[0][14:12] = (decoded_reg_strb.conf && !decoded_req_is_wr) ? field_storage.conf.src_protocol.value : '0;
    assign readback_array[0][17:15] = (decoded_reg_strb.conf && !decoded_req_is_wr) ? field_storage.conf.dst_protocol.value : '0;
    assign readback_array[0][31:18] = '0;
    for(genvar i0=0; i0<16; i0++) begin
        assign readback_array[i0 * 1 + 1] = hwif_in.status[i0].rd_ack ? hwif_in.status[i0].rd_data : '0;
    end
    for(genvar i0=0; i0<16; i0++) begin
        assign readback_array[i0 * 1 + 17] = hwif_in.next_id[i0].rd_ack ? hwif_in.next_id[i0].rd_data : '0;
    end
    for(genvar i0=0; i0<16; i0++) begin
        assign readback_array[i0 * 1 + 33] = hwif_in.done_id[i0].rd_ack ? hwif_in.done_id[i0].rd_data : '0;
    end
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0 * 1 + 49][31:0] = (decoded_reg_strb.dst_addr[i0] && !decoded_req_is_wr) ? field_storage.dst_addr[i0].dst_addr.value : '0;
    end
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0 * 1 + 51][31:0] = (decoded_reg_strb.src_addr[i0] && !decoded_req_is_wr) ? field_storage.src_addr[i0].src_addr.value : '0;
    end
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0 * 1 + 53][31:0] = (decoded_reg_strb.length[i0] && !decoded_req_is_wr) ? field_storage.length[i0].length.value : '0;
    end
    for(genvar i0=0; i0<1; i0++) begin
        for(genvar i1=0; i1<2; i1++) begin
            assign readback_array[i0 * 6 + i1 * 1 + 55][31:0] = (decoded_reg_strb.dim[i0].dst_stride[i1] && !decoded_req_is_wr) ? field_storage.dim[i0].dst_stride[i1].dst_stride.value : '0;
        end
        for(genvar i1=0; i1<2; i1++) begin
            assign readback_array[i0 * 6 + i1 * 1 + 57][31:0] = (decoded_reg_strb.dim[i0].src_stride[i1] && !decoded_req_is_wr) ? field_storage.dim[i0].src_stride[i1].src_stride.value : '0;
        end
        for(genvar i1=0; i1<2; i1++) begin
            assign readback_array[i0 * 6 + i1 * 1 + 59][31:0] = (decoded_reg_strb.dim[i0].reps[i1] && !decoded_req_is_wr) ? field_storage.dim[i0].reps[i1].reps.value : '0;
        end
    end

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr & ~decoded_strb_is_external;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<61; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign external_rd_ack = readback_external_rd_ack;
    assign cpuif_rd_ack = readback_done | readback_external_rd_ack;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
